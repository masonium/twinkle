* Absolute priority
+ [X] refactor material so reflectance takes an intersection and returns a specturm (no separate texture-at-point)
+ bidirectional path tracing
+ a few realistic-ish brdfs
+ microfacet refraction
+ MMLT or VCM (ideally VCM)
+ bilateral tone map
+ volume rendering
+ done.

* TODO Visible Features
** Shapes
- [X] box primitive
- [X] parametric mesh
- [X] heightmap (based on kd-mesh)
- [X] implicit built-ins
  - [X] torus
  - [X] rounded box
  - [X] capsule


** Materials
- [ ] rough glass material
- [ ] plastic (cook-torrance)
- [ ] layered brdf
  - [ ] improved sampling method for GGX

** Textures
- [X] image-based
- [X] function-based
- [ ] worley-noise
- [X] new sky texture

** Renders
- [X] time-based debug renderer (intersection-only)

** Volume rendering !

* External Features
** Lua scripting(!!!)
- [-] basics (renderer, camera, render-options, sphere, implicit, rough-color material)
  - [X] camera
  - [X] sphere
  - [X] plane
  - [X] lights
  - [X] envlights
  - [X] color material
  - [X] implicit
  - [ ] noise texture
- [X] push luastate into generic renderer

** Internal advancements
- [X] invert rendering algorithm (grid_render takes integrator as input, instead of reverse)
- [X] push scheduler as argument to renderer
- [X] lua state into
- [X] Mesh or KDMesh based on number of triangles
- [X] condensing of nested transforms into transform shapes
  - [X] RTTI for all (possibly implement, possibly built-in)
- [X] cache-friendly 8-byte kdtree-node
- [ ] cache-coherent kd-tree (re)organization
- [X] population monte-carlo for grid-render
- [ ] population monte-carlo for pixel-choice of direct lighting
- [X] convert environment map to normal light (improved sampling)
- [ ] shape lights / emissive materials as lights (improved sampling)

* Scenes
- [X] 'showcase-scene': all available shapes
- [ ] building scene (large tower made of random blocks, two or three large ones primary-colored, smaller in background
- [ ] water-scene (height map with caustics)
